{"version":3,"sources":["navbar/index.jsx","App.js","reportWebVitals.js","firebase.js","icon/index.jsx","broadcasting/index.jsx","comitive/index.jsx","contatti/index.jsx","index.js"],"names":["Navbar","React","createElement","window","location","pathname","href","App","navigate","useNavigate","goTo","path","Fragment","className","Grid","container","rowSpacing","columnSpacing","xs","sm","md","item","Paper","elevation","sx","padding","Typography","gutterBottom","variant","component","color","Button","fullWidth","onClick","marginTop","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseApp","initializeApp","getDatabaseTable","getAnalytics","tableName","db","getDatabase","dbRef","ref","child","concat","Icon","icon","FontAwesomeIcon","Broadcasting","data","setData","useState","isAddingNewRow","setIsAddingNewRow","formValue","setFormValue","abitazione","mese","isEditing","setIsEditing","table","fetchData","get","snapshot","exists","val","setValues","value","key","prev","editRow","currentRow","set","clearForm","useEffect","TableContainer","Table","minWidth","aria-label","endIcon","fas","faPlus","disabled","TableHead","TableRow","TableCell","align","TableBody","Object","entries","map","row","index","scope","faEdit","id","removeRow","faClose","TextField","label","onChange","e","target","faSave","setBroadcastingData","push","Comitive","argomento","conduttore","setComitiveData","Contatti","cellulare","indirizzo","nome","paese","telefono","visitaIncoraggiamento","nicolas","ruben","transformData","dataInput","anno","split","getFormattedDate","type","setContattiData","root","ReactDOM","createRoot","document","getElementById","router","createBrowserRouter","children","element","render","StrictMode","RouterProvider"],"mappings":"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","file":"static/js/main.dd36d6b4.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Navbar() {\n  const currentTitle = {\n    '/broadcasting': 'Broadcasting',\n    '/comitive': 'Comitive',\n    '/contatti': 'Proclamatori',\n    '/': 'GESTIONALE SAVA 2',\n  }\n  return (\n    <div>\n      <header>\n        <h1>{currentTitle[window.location.pathname]}</h1>\n      </header>\n      <nav>\n        <a href=\"/\">Home</a>\n        <a href=\"broadcasting\">Broadcasting</a>\n        <a href=\"comitive\">Comitive</a>\n        <a href=\"contatti\">Proclamatori</a>\n      </nav>\n    </div>\n  )\n}\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { createBrowserRouter, useNavigate } from \"react-router-dom\";\nimport {\n  Box,\n  Button,\n  Card,\n  CardContent,\n  Grid,\n  Paper,\n  Typography,\n} from \"@mui/material\";\nimport Navbar from \"./navbar\";\nfunction App() {\n  const navigate = useNavigate();\n  const goTo = (path) => {\n    navigate(path);\n  };\n  return (\n    <>\n      <Navbar></Navbar>\n      <div className=\"cards-container\">\n        <Grid container rowSpacing={1} columnSpacing={{ xs: 1, sm: 2, md: 3 }}>\n          <Grid item xs={4}>\n            <Paper elevation={3} sx={{ padding: \"30px 12px 12px 12px\" }}>\n              <Typography gutterBottom variant=\"h5\" component=\"div\">\n                Broadcasting\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Tabella contenente le info relative a dove sono stati tenuti gli\n                ultimi broadcasting.\n                <br />\n                Se in un mese non è stato visto insieme la data relativa a quel\n                mese non apparira'\n              </Typography>\n              <Button\n                fullWidth\n                onClick={() => {\n                  goTo(\"broadcasting\");\n                }}\n                variant=\"contained\"\n                sx={{ marginTop: \"20px\" }}\n              >\n                vai a Broadcasting\n              </Button>\n            </Paper>\n          </Grid>\n          <Grid item xs={4}>\n            <Paper elevation={3} sx={{ padding: \"30px 12px 12px 12px\" }}>\n              <Typography gutterBottom variant=\"h5\" component=\"div\">\n                Comitive\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Tabella contenente le info relative a tutte le varie comitive,\n                inclusi argomenti trattati e il conduttore\n                <br />\n              </Typography>\n              <Button\n                fullWidth\n                onClick={() => {\n                  goTo(\"comitive\");\n                }}\n                variant=\"contained\"\n                sx={{ marginTop: \"20px\" }}\n              >\n                vai a Comitive\n              </Button>\n            </Paper>\n          </Grid>\n          <Grid item xs={4}>\n            <Paper elevation={3} sx={{ padding: \"30px 12px 12px 12px\" }}>\n              <Typography gutterBottom variant=\"h5\" component=\"div\">\n                Proclamatori\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Tabella contenente le info relative ai proclamatori, i loro\n                contattie altre info relative alle ultime visite di\n                incoraggiamento e a quando risale l'ultima volta che sono usciti\n                con Ruben/Nicolas\n              </Typography>\n              <Button\n                fullWidth\n                onClick={() => {\n                  goTo(\"contatti\");\n                }}\n                variant=\"contained\"\n                sx={{ marginTop: \"20px\" }}\n              >\n                vai a Proclamatori\n              </Button>\n            </Paper>\n          </Grid>\n        </Grid>\n      </div>\n      <footer>\n        <p>© 2024 - GESTIONALE SAVA 2 </p>\n      </footer>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport { child, get, getDatabase, push, ref } from \"firebase/database\";\n\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nexport const firebaseConfig = {\n  apiKey: \"AIzaSyA-oC5UfI8VWBqLBAj5y9u_eVNZwUBuU5E\",\n  authDomain: \"gestione-gruppo-servizio.firebaseapp.com\",\n  databaseURL:\n    \"https://gestione-gruppo-servizio-default-rtdb.europe-west1.firebasedatabase.app\",\n  projectId: \"gestione-gruppo-servizio\",\n  storageBucket: \"gestione-gruppo-servizio.appspot.com\",\n  messagingSenderId: \"568226232254\",\n  appId: \"1:568226232254:web:a04028ec60cd8108b22bef\",\n  measurementId: \"G-19722K0XVD\",\n};\n\nexport const firebaseApp = initializeApp(firebaseConfig);\nexport const firebaseAnalytics = getAnalytics(firebaseApp);\nexport const getDatabaseTable = (tableName) => {\n  const db = getDatabase(firebaseApp, firebaseConfig.databaseURL);\n  const dbRef = ref(db);\n  return child(dbRef, `/${tableName}`);\n};\n","import { fas } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport React from 'react'\n\nexport default function Icon({icon}) {\n  return (\n    <FontAwesomeIcon icon={icon}></FontAwesomeIcon>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport Table from '@mui/material/Table'\nimport TableBody from '@mui/material/TableBody'\nimport TableCell from '@mui/material/TableCell'\nimport TableContainer from '@mui/material/TableContainer'\nimport TableHead from '@mui/material/TableHead'\nimport TableRow from '@mui/material/TableRow'\nimport Paper from '@mui/material/Paper'\nimport { getDatabaseTable } from '../firebase'\nimport { get, push, set } from 'firebase/database'\nimport { Button, TextField } from '@mui/material'\nimport Icon from '../icon'\nimport { fas } from '@fortawesome/free-solid-svg-icons'\nimport Navbar from '../navbar'\n\nexport default function Broadcasting() {\n  const [data, setData] = useState()\n  const [isAddingNewRow, setIsAddingNewRow] = useState(false)\n  const [formValue, setFormValue] = useState({\n    abitazione: '',\n    mese: '',\n  })\n  const [isEditing, setIsEditing] = useState('')\n\n  const table = getDatabaseTable('broadcasting')\n  const fetchData = () => {\n    get(table).then((snapshot) => {\n      if (snapshot.exists()) {\n        setData(snapshot.val())\n      }\n    })\n  }\n  const setValues = (value, key) => {\n    setFormValue((prev) => ({ ...prev, [key]: value }))\n  }\n  const setBroadcastingData = () => {\n    push(table, formValue)\n    setIsAddingNewRow(false)\n    clearForm()\n    fetchData()\n  }\n  const editRow = () => {\n    const currentRow = getDatabaseTable(`broadcasting/${isEditing}`)\n    set(currentRow, formValue)\n    setIsEditing('')\n    clearForm()\n    fetchData()\n  }\n\n  const removeRow = (id) => {\n    const currentRow = getDatabaseTable(`broadcasting/${id}`)\n    set(currentRow, null)\n    fetchData()\n  }\n\n  const clearForm = () => {\n    setFormValue({ abitazione: '', mese: '' })\n  }\n  useEffect(() => {\n    fetchData()\n  }, [])\n\n  return (\n    <div>\n      <Navbar></Navbar>\n      <TableContainer component={Paper}>\n        <Table sx={{ minWidth: 700 }} aria-label=\"customized table\">\n          <caption>\n            <Button\n              fullWidth\n              variant=\"contained\"\n              endIcon={<Icon icon={fas.faPlus}></Icon>}\n              onClick={() => {\n                setIsAddingNewRow(true)\n              }}\n              disabled={isAddingNewRow}\n            >\n              AGGIUNGI NUOVO BROADCASTING\n            </Button>\n          </caption>\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\">ABITAZIONI</TableCell>\n              <TableCell align=\"center\">DATA</TableCell>\n              <TableCell align=\"center\">ACTIONS</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {data && (\n              <>\n                {Object.entries(data).map((row, index) => (\n                  <>\n                    {isEditing !== row[0] && (\n                      <TableRow key={`row-${index}`}>\n                        <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                          {row[1].abitazione}\n                        </TableCell>\n                        <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                          {row[1].mese}\n                        </TableCell>\n                        <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                          <Button\n                            onClick={() => {\n                              setIsEditing(row[0])\n                              setFormValue(row[1])\n                            }}\n                          >\n                            <Icon icon={fas.faEdit}></Icon>\n                          </Button>\n                          <Button\n                            onClick={() => {\n                              removeRow(row[0])\n                            }}\n                          >\n                            <Icon icon={fas.faClose}></Icon>\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    )}\n                    {isEditing === row[0] && (\n                      <TableRow key={`row-${index}-edit`}>\n                        <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                          <TextField\n                            label=\"Abitazione\"\n                            variant=\"outlined\"\n                            onChange={(e) => {\n                              setValues(e.target.value, 'abitazione')\n                            }}\n                            value={formValue.abitazione}\n                          ></TextField>\n                        </TableCell>\n                        <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                          <TextField\n                            label=\"Mese\"\n                            variant=\"outlined\"\n                            onChange={(e) => {\n                              setValues(e.target.value, 'mese')\n                            }}\n                            value={formValue.mese}\n                          ></TextField>\n                        </TableCell>\n                        <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                          <Button onClick={editRow}>\n                            <Icon icon={fas.faSave}></Icon>\n                          </Button>\n                          <Button\n                            onClick={() => {\n                              setIsEditing('')\n                            }}\n                          >\n                            <Icon icon={fas.faClose}></Icon>\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    )}\n                  </>\n                ))}\n              </>\n            )}\n            {isAddingNewRow && (\n              <TableRow key={`add-row`}>\n                <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                  <TextField\n                    label=\"Abitazione\"\n                    variant=\"outlined\"\n                    onChange={(e) => {\n                      setValues(e.target.value, 'abitazione')\n                    }}\n                    value={formValue.abitazione}\n                  ></TextField>\n                </TableCell>\n                <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                  <TextField\n                    label=\"Mese\"\n                    variant=\"outlined\"\n                    onChange={(e) => {\n                      setValues(e.target.value, 'mese')\n                    }}\n                    value={formValue.mese}\n                  ></TextField>\n                </TableCell>\n                <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                  <Button onClick={setBroadcastingData}>\n                    <Icon icon={fas.faSave}></Icon>\n                  </Button>\n                  <Button\n                    onClick={() => {\n                      setIsAddingNewRow(false)\n                    }}\n                  >\n                    <Icon icon={fas.faClose}></Icon>\n                  </Button>\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <footer>\n        <p>© 2024 - GESTIONALE SAVA 2 </p>\n      </footer>\n    </div>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport Table from '@mui/material/Table'\nimport TableBody from '@mui/material/TableBody'\nimport TableCell from '@mui/material/TableCell'\nimport TableContainer from '@mui/material/TableContainer'\nimport TableHead from '@mui/material/TableHead'\nimport TableRow from '@mui/material/TableRow'\nimport Paper from '@mui/material/Paper'\nimport { getDatabaseTable } from '../firebase'\nimport { get, push, set } from 'firebase/database'\nimport { Button, TextField } from '@mui/material'\nimport Icon from '../icon'\nimport { fas } from '@fortawesome/free-solid-svg-icons'\nimport Navbar from '../navbar'\n\nexport default function Comitive() {\n  const [data, setData] = useState()\n  const [isAddingNewRow, setIsAddingNewRow] = useState(false)\n  const [formValue, setFormValue] = useState({\n    argomento: '',\n    conduttore: '',\n    mese: '',\n  })\n  const [isEditing, setIsEditing] = useState('')\n\n  const table = getDatabaseTable('comitive')\n  const fetchData = () => {\n    get(table).then((snapshot) => {\n      if (snapshot.exists()) {\n        setData(snapshot.val())\n      }\n    })\n  }\n  const setValues = (value, key) => {\n    setFormValue((prev) => ({ ...prev, [key]: value }))\n  }\n  const setComitiveData = () => {\n    push(table, formValue)\n    setIsAddingNewRow(false)\n    clearForm()\n    fetchData()\n  }\n  const editRow = () => {\n    const currentRow = getDatabaseTable(`comitive/${isEditing}`)\n    set(currentRow, formValue)\n    setIsEditing('')\n    clearForm()\n    fetchData()\n  }\n\n  const removeRow = (id) => {\n    const currentRow = getDatabaseTable(`comitive/${id}`)\n    set(currentRow, null)\n    fetchData()\n  }\n\n  const clearForm = () => {\n    setFormValue({\n      argomento: '',\n      conduttore: '',\n      mese: '',\n    })\n  }\n  useEffect(() => {\n    fetchData()\n  }, [])\n\n  return (\n    <div>\n      <Navbar></Navbar>\n      <TableContainer component={Paper}>\n        <Table sx={{ minWidth: 700 }} aria-label=\"customized table\">\n          <caption>\n            <Button\n              fullWidth\n              variant=\"contained\"\n              endIcon={<Icon icon={fas.faPlus}></Icon>}\n              onClick={() => {\n                setIsAddingNewRow(true)\n              }}\n              disabled={isAddingNewRow}\n            >\n              AGGIUNGI NUOVA COMITIVA\n            </Button>\n          </caption>\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\">ARGOMENTO</TableCell>\n              <TableCell align=\"center\">CONDUTTORE</TableCell>\n              <TableCell align=\"center\">MESE</TableCell>\n              <TableCell align=\"center\">ACTIONS</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {data && (\n              <>\n                {Object.entries(data).map((row, index) => (\n                  <>\n                    {isEditing !== row[0] && (\n                      <TableRow key={`row-${index}`}>\n                        <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                          {row[1].argomento}\n                        </TableCell>\n                        <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                          {row[1].conduttore}\n                        </TableCell>\n                        <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                          {row[1].mese}\n                        </TableCell>\n                        <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                          <Button\n                            onClick={() => {\n                              setIsEditing(row[0])\n                              setFormValue(row[1])\n                            }}\n                          >\n                            <Icon icon={fas.faEdit}></Icon>\n                          </Button>\n                          <Button\n                            onClick={() => {\n                              removeRow(row[0])\n                            }}\n                          >\n                            <Icon icon={fas.faClose}></Icon>\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    )}\n                    {isEditing === row[0] && (\n                      <TableRow key={`row-${index}-edit`}>\n                        <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                          <TextField\n                            label=\"Argomento\"\n                            variant=\"outlined\"\n                            onChange={(e) => {\n                              setValues(e.target.value, 'argomento')\n                            }}\n                            value={formValue.argomento}\n                          ></TextField>\n                        </TableCell>\n                        <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                          <TextField\n                            label=\"Conduttore\"\n                            variant=\"outlined\"\n                            onChange={(e) => {\n                              setValues(e.target.value, 'conduttore')\n                            }}\n                            value={formValue.conduttore}\n                          ></TextField>\n                        </TableCell>\n                        <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                          <TextField\n                            label=\"Mese\"\n                            variant=\"outlined\"\n                            onChange={(e) => {\n                              setValues(e.target.value, 'mese')\n                            }}\n                            value={formValue.mese}\n                          ></TextField>\n                        </TableCell>\n                        <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                          <Button onClick={editRow}>\n                            <Icon icon={fas.faSave}></Icon>\n                          </Button>\n                          <Button\n                            onClick={() => {\n                              setIsEditing('')\n                            }}\n                          >\n                            <Icon icon={fas.faClose}></Icon>\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    )}\n                  </>\n                ))}\n              </>\n            )}\n            {isAddingNewRow && (\n              <TableRow key={`add-row`}>\n                <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                  <TextField\n                    label=\"Argomento\"\n                    variant=\"outlined\"\n                    onChange={(e) => {\n                      setValues(e.target.value, 'argomento')\n                    }}\n                    value={formValue.argomento}\n                  ></TextField>\n                </TableCell>\n                <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                  <TextField\n                    label=\"Conduttore\"\n                    variant=\"outlined\"\n                    onChange={(e) => {\n                      setValues(e.target.value, 'conduttore')\n                    }}\n                    value={formValue.conduttore}\n                  ></TextField>\n                </TableCell>\n                <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                  <TextField\n                    label=\"Mese\"\n                    variant=\"outlined\"\n                    onChange={(e) => {\n                      setValues(e.target.value, 'mese')\n                    }}\n                    value={formValue.mese}\n                  ></TextField>\n                </TableCell>\n                <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                  <Button onClick={setComitiveData}>\n                    <Icon icon={fas.faSave}></Icon>\n                  </Button>\n                  <Button\n                    onClick={() => {\n                      setIsAddingNewRow(false)\n                    }}\n                  >\n                    <Icon icon={fas.faClose}></Icon>\n                  </Button>\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <footer>\n        <p>© 2024 - GESTIONALE SAVA 2 </p>\n      </footer>\n    </div>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport Table from '@mui/material/Table'\nimport TableBody from '@mui/material/TableBody'\nimport TableCell from '@mui/material/TableCell'\nimport TableContainer from '@mui/material/TableContainer'\nimport TableHead from '@mui/material/TableHead'\nimport TableRow from '@mui/material/TableRow'\nimport Paper from '@mui/material/Paper'\nimport { getDatabaseTable } from '../firebase'\nimport { get, push, set } from 'firebase/database'\nimport { Button, TextField } from '@mui/material'\nimport Icon from '../icon'\nimport { fas } from '@fortawesome/free-solid-svg-icons'\nimport Navbar from '../navbar'\n\nexport default function Contatti() {\n  const [data, setData] = useState()\n  const [isAddingNewRow, setIsAddingNewRow] = useState(false)\n  const [formValue, setFormValue] = useState({\n    cellulare: '',\n    indirizzo: '',\n    nome: '',\n    paese: '',\n    telefono: '',\n    visitaIncoraggiamento: '',\n    nicolas: '',\n    ruben: '',\n  })\n  const [isEditing, setIsEditing] = useState('')\n\n  const table = getDatabaseTable('contatti')\n  const fetchData = () => {\n    get(table).then((snapshot) => {\n      if (snapshot.exists()) {\n        setData(snapshot.val())\n      }\n    })\n  }\n  const setValues = (value, key) => {\n    setFormValue((prev) => ({ ...prev, [key]: value }))\n  }\n  const setContattiData = () => {\n    push(table, formValue)\n    setIsAddingNewRow(false)\n    clearForm()\n    fetchData()\n  }\n  const editRow = () => {\n    const currentRow = getDatabaseTable(`contatti/${isEditing}`)\n    set(currentRow, formValue)\n    setIsEditing('')\n    clearForm()\n    fetchData()\n  }\n\n  const removeRow = (id) => {\n    const currentRow = getDatabaseTable(`contatti/${id}`)\n    set(currentRow, null)\n    fetchData()\n  }\n\n  const clearForm = () => {\n    setFormValue({\n      cellulare: '',\n      indirizzo: '',\n      nome: '',\n      paese: '',\n      telefono: '',\n      visitaIncoraggiamento: '',\n      nicolas: '',\n      ruben: '',\n    })\n  }\n\n  const transformData = (dataInput) => {\n    // Dividi la stringa della data in anno, mese e giorno\n\n    // Estrai anno, mese e giorno\n    var anno = dataInput.split('-')[0]\n    var mese = dataInput.split('-')[1]\n    var giorno = dataInput.split('-')[2]\n\n    // Formatta la data come gg/mm/aaaa\n    return giorno + '/' + mese + '/' + anno\n  }\n\n  const getFormattedDate = (dataInput) => {\n    var anno = dataInput.split('/')[2]\n    var mese = dataInput.split('/')[1]\n    var giorno = dataInput.split('/')[0]\n\n    return anno + '-' + mese + '-' + giorno\n  }\n\n  useEffect(() => {\n    fetchData()\n  }, [])\n\n  return (\n    <div>\n      <Navbar></Navbar>\n      <TableContainer component={Paper}>\n        <Table sx={{ minWidth: 700 }} aria-label=\"customized table\">\n          <caption>\n            <Button\n              fullWidth\n              variant=\"contained\"\n              endIcon={<Icon icon={fas.faPlus}></Icon>}\n              onClick={() => {\n                setIsAddingNewRow(true)\n              }}\n              disabled={isAddingNewRow}\n            >\n              AGGIUNGI NUOVO PROCLAMATORE\n            </Button>\n          </caption>\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\">NOME</TableCell>\n              <TableCell align=\"center\">CELLULARE</TableCell>\n              <TableCell align=\"center\">TELEFONO</TableCell>\n              <TableCell align=\"center\">INDIRIZZO</TableCell>\n              <TableCell align=\"center\">PAESE</TableCell>\n              <TableCell align=\"center\">VISITA INCORAGGIAMENTO</TableCell>\n              <TableCell align=\"center\">SERVIZIO-NICOLAS</TableCell>\n              <TableCell align=\"center\">SERVIZIO-RUBEN</TableCell>\n              <TableCell align=\"center\">ACTION</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {data && (\n              <>\n                {Object.entries(data).map((row, index) => (\n                  <>\n                    {isEditing !== row[0] && (\n                      <TableRow key={`row-${index}`}>\n                        <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                          {row[1].nome}\n                        </TableCell>\n                        <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                          {row[1].cellulare}\n                        </TableCell>\n                        <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                          {row[1].telefono}\n                        </TableCell>\n                        <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                          {row[1].indirizzo}\n                        </TableCell>\n                        <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                          {row[1].paese}\n                        </TableCell>\n                        <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                          {row[1]['visitaIncoraggiamento']}\n                        </TableCell>\n                        <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                          {row[1].nicolas}\n                        </TableCell>\n                        <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                          {row[1].ruben}\n                        </TableCell>\n                        <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                          <Button\n                            onClick={() => {\n                              setIsEditing(row[0])\n                              setFormValue(row[1])\n                            }}\n                          >\n                            <Icon icon={fas.faEdit}></Icon>\n                          </Button>\n                          <Button\n                            onClick={() => {\n                              removeRow(row[0])\n                            }}\n                          >\n                            <Icon icon={fas.faClose}></Icon>\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    )}\n                    {isEditing === row[0] && (\n                      <TableRow key={`row-${index}-edit`}>\n                        <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                          <TextField\n                            label=\"nome\"\n                            variant=\"outlined\"\n                            onChange={(e) => {\n                              setValues(e.target.value, 'nome')\n                            }}\n                            value={formValue.nome}\n                          ></TextField>\n                        </TableCell>\n                        <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                          <TextField\n                            label=\"cellulare\"\n                            variant=\"outlined\"\n                            onChange={(e) => {\n                              setValues(e.target.value, 'cellulare')\n                            }}\n                            value={formValue.cellulare}\n                          ></TextField>\n                        </TableCell>\n                        <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                          <TextField\n                            label=\"telefono\"\n                            variant=\"outlined\"\n                            onChange={(e) => {\n                              setValues(e.target.value, 'telefono')\n                            }}\n                            value={formValue.telefono}\n                          ></TextField>\n                        </TableCell>\n                        <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                          <TextField\n                            label=\"indirizzo\"\n                            variant=\"outlined\"\n                            onChange={(e) => {\n                              setValues(e.target.value, 'indirizzo')\n                            }}\n                            value={formValue.indirizzo}\n                          ></TextField>\n                        </TableCell>\n\n                        <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                          <TextField\n                            label=\"paese\"\n                            variant=\"outlined\"\n                            onChange={(e) => {\n                              setValues(e.target.value, 'paese')\n                            }}\n                            value={formValue.paese}\n                          ></TextField>\n                        </TableCell>\n\n                        <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                          <TextField\n                            label=\"visita incoraggiamento\"\n                            variant=\"outlined\"\n                            onChange={(e) => {\n                              setValues(\n                                transformData(e.target.value),\n                                'visitaIncoraggiamento',\n                              )\n                            }}\n                            type=\"date\"\n                            value={getFormattedDate(\n                              formValue.visitaIncoraggiamento,\n                            )}\n                          ></TextField>\n                        </TableCell>\n                        <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                          <TextField\n                            label=\"nicolas\"\n                            variant=\"outlined\"\n                            onChange={(e) => {\n                              setValues(\n                                transformData(e.target.value),\n                                'nicolas',\n                              )\n                            }}\n                            value={getFormattedDate(formValue.nicolas)}\n                            type=\"date\"\n                          ></TextField>\n                        </TableCell>\n                        <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                          <TextField\n                            label=\"ruben\"\n                            variant=\"outlined\"\n                            onChange={(e) => {\n                              setValues(transformData(e.target.value), 'ruben')\n                            }}\n                            value={getFormattedDate(formValue.ruben)}\n                            type=\"date\"\n                          ></TextField>\n                        </TableCell>\n                        <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                          <Button onClick={editRow}>\n                            <Icon icon={fas.faSave}></Icon>\n                          </Button>\n                          <Button\n                            onClick={() => {\n                              setIsEditing('')\n                            }}\n                          >\n                            <Icon icon={fas.faClose}></Icon>\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    )}\n                  </>\n                ))}\n              </>\n            )}\n            {isAddingNewRow && (\n              <TableRow key={`add-row`}>\n                <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                  <TextField\n                    label=\"nome\"\n                    variant=\"outlined\"\n                    onChange={(e) => {\n                      setValues(e.target.value, 'nome')\n                    }}\n                    value={formValue.nome}\n                  ></TextField>\n                </TableCell>\n                <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                  <TextField\n                    label=\"cellulare\"\n                    variant=\"outlined\"\n                    onChange={(e) => {\n                      setValues(e.target.value, 'cellulare')\n                    }}\n                    value={formValue.cellulare}\n                  ></TextField>\n                </TableCell>\n                <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                  <TextField\n                    label=\"telefono\"\n                    variant=\"outlined\"\n                    onChange={(e) => {\n                      setValues(e.target.value, 'telefono')\n                    }}\n                    value={formValue.telefono}\n                  ></TextField>\n                </TableCell>\n                <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                  <TextField\n                    label=\"indirizzo\"\n                    variant=\"outlined\"\n                    onChange={(e) => {\n                      setValues(e.target.value, 'indirizzo')\n                    }}\n                    value={formValue.indirizzo}\n                  ></TextField>\n                </TableCell>\n\n                <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                  <TextField\n                    label=\"paese\"\n                    variant=\"outlined\"\n                    onChange={(e) => {\n                      setValues(e.target.value, 'paese')\n                    }}\n                    value={formValue.paese}\n                  ></TextField>\n                </TableCell>\n\n                <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                  <TextField\n                    label=\"visita incoraggiamento\"\n                    variant=\"outlined\"\n                    onChange={(e) => {\n                      setValues(\n                        transformData(e.target.value),\n                        'visitaIncoraggiamento',\n                      )\n                    }}\n                    type=\"date\"\n                    value={getFormattedDate(formValue.visitaIncoraggiamento)}\n                  ></TextField>\n                </TableCell>\n                <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                  <TextField\n                    label=\"nicolas\"\n                    variant=\"outlined\"\n                    onChange={(e) => {\n                      setValues(transformData(e.target.value), 'nicolas')\n                    }}\n                    value={getFormattedDate(formValue.nicolas)}\n                    type=\"date\"\n                  ></TextField>\n                </TableCell>\n                <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                  <TextField\n                    label=\"ruben\"\n                    variant=\"outlined\"\n                    onChange={(e) => {\n                      setValues(transformData(e.target.value), 'ruben')\n                    }}\n                    value={getFormattedDate(formValue.ruben)}\n                    type=\"date\"\n                  ></TextField>\n                </TableCell>\n                <TableCell align=\"center\" component=\"th\" scope=\"row\">\n                  <Button onClick={setContattiData}>\n                    <Icon icon={fas.faSave}></Icon>\n                  </Button>\n                  <Button\n                    onClick={() => {\n                      setIsAddingNewRow(false)\n                    }}\n                  >\n                    <Icon icon={fas.faClose}></Icon>\n                  </Button>\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <footer>\n        <p>© 2024 - GESTIONALE SAVA 2 </p>\n      </footer>\n    </div>\n  )\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { RouterProvider, createBrowserRouter } from \"react-router-dom\";\nimport Broadcasting from \"./broadcasting\";\nimport Comitive from \"./comitive\";\nimport Contatti from \"./contatti\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\n\nconst router = createBrowserRouter([\n  {\n    path: \"/\",\n    children: [\n      { path: \"broadcasting\", element: <Broadcasting /> },\n      { path: \"comitive\", element: <Comitive /> },\n      { path: \"contatti\", element: <Contatti /> },\n      { path: \"\", element: <App /> },\n    ],\n  },\n]);\n\nroot.render(\n  <React.StrictMode>\n    {/* <App /> */}\n    <RouterProvider router={router} />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}